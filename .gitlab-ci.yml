stages:
    - test
    - build
    - deploy

cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
        - .venv/
        - node_modules/

test-api:
    image: python:3.7-slim
    stage: test
    services:
        - postgres:10.9-alpine
    variables:
        DJANGO_SETTINGS_MODULE: 'app.settings.test'
        DATABASE_URL: postgres://testuser:testpass@postgres/test_db
        POSTGRES_USER: testuser
        POSTGRES_PASSWORD: testpass
    script:
        - pip install virtualenv # set up local venv dir for caching of packages
        - virtualenv .venv
        - source .venv/bin/activate
        - cd api
        - pip install -r requirements-dev.txt
        - black --check .
        - pytest . -p no:warnings
    only:
        changes:
            - api/*

build-dockerhub-api:
    stage: build
    tags:
        - flagsmith-shell-runner
    script:
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then IMAGE_TAG="latest"; elif [ "$CI_COMMIT_REF_NAME" == "develop"
          ]; then IMAGE_TAG="develop"; else IMAGE_TAG=$CI_COMMIT_TAG; fi
        - echo $CI_COMMIT_REF_NAME > $CI_PROJECT_DIR/api/CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_SHA > $CI_PROJECT_DIR/api/CI_COMMIT_SHA
        - echo $IMAGE_TAG > $CI_PROJECT_DIR/api/IMAGE_TAG
        - docker login --username $DOCKER_HUB_PUSH_USERNAME_SHELL_RUNNER -p $DOCKER_HUB_PUSH_PASSWORD_SHELL_RUNNER
        - docker build -t flagsmith/flagsmith-api:$IMAGE_TAG -f $CI_PROJECT_DIR/api/Dockerfile api
        - docker push flagsmith/flagsmith-api:$IMAGE_TAG
    only:
        refs:
            - master
            - tags
            - develop
        changes:
            - api/*
            - .gitlab-ci.yml

deploydevelop-api:
    image: ilyasemenov/gitlab-ci-git-push
    stage: deploy
    script:
        - git-push dokku@bitwarden.bullet-train.io:bullet-train
    only:
        refs:
            - develop
            - feature/ch1382/combine-api-and-fe-docker-repositories
        changes:
            - api/*
            - .gitlab-ci.yml

.deploy_to_beanstalk: &deploy_to_beanstalk |
    echo "Deploying to beanstalk with label $CI_COMMIT_SHORT_SHA"
    cd api
    eb deploy $ENVIRONMENT_NAME -l "$CI_COMMIT_SHORT_SHA"

deployawsstaging:
    image: flagsmith/eb-cli:latest
    stage: deploy
    variables:
        ENVIRONMENT_NAME: staging-api
        AWS_ACCESS_KEY_ID: '$AWS_STAGING_ACCESS_KEY_ID'
        AWS_SECRET_ACCESS_KEY: '$AWS_STAGING_SECRET_ACCESS_KEY'
    script:
        - *deploy_to_beanstalk
    only:
        refs:
            - staging
        changes:
            - api/*

deployawsmaster:
    image: flagsmith/eb-cli:latest
    stage: deploy
    variables:
        ENVIRONMENT_NAME: production-api
        AWS_ACCESS_KEY_ID: '$AWS_PRODUCTION_ACCESS_KEY_ID'
        AWS_SECRET_ACCESS_KEY: '$AWS_PRODUCTION_SECRET_ACCESS_KEY'
    script:
        - *deploy_to_beanstalk
    only:
        refs:
            - tags
        changes:
            - api/*

# Frontend Jobs

test-frontend:
    image: kylessg/bullet-train-nightwatch:1.1
    stage: test
    script:
        - google-chrome --version
        - cd frontend
        - node -v
        - npm i
        - if [ $CI_COMMIT_REF_NAME == "staging" ]; then export ENV=staging; echo 'Setting env to' $ENV; npm run env; fi;
        - if [ $CI_COMMIT_REF_NAME == "develop" ]; then export ENV=dev; echo 'Setting env to' $ENV; npm run env; fi;
        - if [ $CI_COMMIT_REF_NAME == "feature/ch1382/combine-api-and-fe-docker-repositories" ]; then export ENV=dev;
          echo 'Setting env to' $ENV; npm run env; fi;
        - if [ $CI_COMMIT_REF_NAME == "master" ]; then export ENV=prod; echo 'Setting env to' $ENV; npm run env; fi;
        - npm run test
    only:
        refs:
            - master
            - staging
            - feature/ch1382/combine-api-and-fe-docker-repositories
        changes:
            - frontend/*
            - .gitlab-ci.yml

build-dockerhub-frontend:
    stage: deploy
    tags:
        - flagsmith-shell-runner
    script:
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then IMAGE_TAG="latest"; elif [ "$CI_COMMIT_REF_NAME" == "develop"
          ]; then IMAGE_TAG="develop"; elif [ "$CI_COMMIT_REF_NAME" ==
          "feature/ch1382/combine-api-and-fe-docker-repositories" ]; then IMAGE_TAG="repomerge"; else
          IMAGE_TAG=$CI_COMMIT_TAG; fi
        - echo $CI_COMMIT_REF_NAME > $CI_PROJECT_DIR/CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_SHA > $CI_PROJECT_DIR/CI_COMMIT_SHA
        - echo $IMAGE_TAG > $CI_PROJECT_DIR/IMAGE_TAG
        - docker login --username $DOCKER_HUB_PUSH_USERNAME_SHELL_RUNNER -p $DOCKER_HUB_PUSH_PASSWORD_SHELL_RUNNER
        - docker build -t flagsmith/flagsmith-frontend:$IMAGE_TAG -f $CI_PROJECT_DIR/frontend/Dockerfile frontend
        - docker push flagsmith/flagsmith-frontend:$IMAGE_TAG
    only:
        refs:
            - master
            - tags
            - develop
            - feature/ch1382/combine-api-and-fe-docker-repositories
        changes:
            - frontend/*
            - .gitlab-ci.yml

deploymaster-frontend:
    image: kylessg/bullet-train-gcloud:1.0
    stage: deploy
    script:
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then IMAGE_TAG="latest"; elif [ "$CI_COMMIT_REF_NAME" == "develop"
          ]; then IMAGE_TAG="develop"; else IMAGE_TAG=$CI_COMMIT_TAG; fi
        - echo $CI_COMMIT_REF_NAME > $CI_PROJECT_DIR/CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_SHA > $CI_PROJECT_DIR/CI_COMMIT_SHA
        - echo $IMAGE_TAG > $CI_PROJECT_DIR/IMAGE_TAG
        - cd frontend
        - npm i
        - export ENV=prod; npm run env
        - npm run dotenv
        - npm run bundle
        - echo $DEPLOY_KEY_FILE_PROD > /tmp/$CI_PIPELINE_ID.json
        - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
        - gcloud config set project bullet-train-front-end-prod
        - gcloud app deploy
    only:
        refs:
            - master
        changes:
            - frontend/*
            - .gitlab-ci.yml

deploystaging-frontend:
    image: kylessg/bullet-train-gcloud:1.0
    stage: deploy
    script:
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then IMAGE_TAG="latest"; elif [ "$CI_COMMIT_REF_NAME" == "develop"
          ]; then IMAGE_TAG="develop"; else IMAGE_TAG=$CI_COMMIT_TAG; fi
        - echo $CI_COMMIT_REF_NAME > $CI_PROJECT_DIR/CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_SHA > $CI_PROJECT_DIR/CI_COMMIT_SHA
        - echo $IMAGE_TAG > $CI_PROJECT_DIR/IMAGE_TAG
        - cd frontend
        - npm i
        - export ENV=staging; npm run env
        - npm run dotenv
        - npm run bundlestaging
        - echo $DEPLOY_KEY_FILE_STAGING > /tmp/$CI_PIPELINE_ID.json
        - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
        - gcloud config set project bullet-train-front-end-staging
        - gcloud app deploy
    only:
        refs:
            - staging
        changes:
            - frontend/*
            - .gitlab-ci.yml

deploydevelop-frontend:
    image: kylessg/bullet-train-gcloud:1.0
    stage: deploy
    script:
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then IMAGE_TAG="latest"; elif [ "$CI_COMMIT_REF_NAME" == "develop"
          ]; then IMAGE_TAG="develop"; elif [ "$CI_COMMIT_REF_NAME" ==
          "feature/ch1382/combine-api-and-fe-docker-repositories" ]; then IMAGE_TAG="repomerge"; else
          IMAGE_TAG=$CI_COMMIT_TAG; fi
        - echo $CI_COMMIT_REF_NAME > $CI_PROJECT_DIR/CI_COMMIT_REF_NAME
        - echo $CI_COMMIT_SHA > $CI_PROJECT_DIR/CI_COMMIT_SHA
        - echo $IMAGE_TAG > $CI_PROJECT_DIR/IMAGE_TAG
        - cd frontend
        - npm i
        - export ENV=dev; npm run env
        - npm run dotenv
        - npm run bundledev
        - echo $DEPLOY_KEY_FILE_DEV > /tmp/$CI_PIPELINE_ID.json
        - gcloud auth activate-service-account --key-file /tmp/$CI_PIPELINE_ID.json
        - gcloud config set project bullet-train-front-end-dev
        - gcloud app deploy
    only:
        refs:
            - develop
            - feature/ch1382/combine-api-and-fe-docker-repositories
        changes:
            - frontend/*
            - .gitlab-ci.yml
